{"ast":null,"code":"import _slicedToArray from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js\";\nimport React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component';\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\nexport const Notifications = () => {\n  //Hooks state\n  const _useState = useState(2000),\n        _useState2 = _slicedToArray(_useState, 2),\n        delay = _useState2[0],\n        setDelay = _useState2[1];\n\n  const _useState3 = useState(10000),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameTempo = _useState4[0],\n        setGameTempo = _useState4[1];\n\n  const _useState5 = useState([...Array(48).keys()]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notifications = _useState6[0],\n        setRemainNotifications = _useState6[1];\n\n  const _useState7 = useState([{\n    x: getX(),\n    y: getY()\n  }]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        locations = _useState8[0],\n        setLocations = _useState8[1];\n\n  const _useState9 = useState([{\n    0: '4',\n    1: '9'\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        currNotifications = _useState10[0],\n        setCurrNotifications = _useState10[1];\n\n  useInterval(() => {\n    setLocations([...locations, {\n      x: getX(),\n      y: getY()\n    }]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = notificationNumber.length === 1 ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n    setCurrNotifications([...currNotifications, nextNotification]);\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay); // Make it faster every second!\n\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n  const onSwipedLeft = (type, category, notification) => {\n    console.log('left', type, category);\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    console.log('right', type, category);\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n  };\n\n  return React.createElement(React.Fragment, null, locations.map((location, idx) => {\n    if (!currNotifications[idx]) return null;\n    const currSkill = skills[currNotifications[idx][0]];\n    const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n    const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n    const category = currSkill.title;\n    return React.createElement(Swipe, {\n      key: idx,\n      onSwipedLeft: () => onSwipedLeft(notificationType, category, idx),\n      onSwipedRight: () => onSwipedRight(notificationType, category, idx),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(NotificationBox, {\n      top: location.x,\n      left: location.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      width: BOX_WIDTH,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }));\n};","map":{"version":3,"sources":["/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js"],"names":["React","useState","Swipe","NotificationBox","BOX_WIDTH","skills","useInterval","getRandomInt","getY","getX","Notifications","delay","setDelay","gameTempo","setGameTempo","Array","keys","notifications","setRemainNotifications","x","y","locations","setLocations","currNotifications","setCurrNotifications","notificationNumber","length","toString","nextNotification","filter","_","idx","onSwipedLeft","type","category","notification","console","log","onSwipedRight","map","location","currSkill","Svg","svg","notificationType","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component'\n\n\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\n\nexport const Notifications = () => {\n  //Hooks state\n  const [delay, setDelay] = useState(2000);\n  const [gameTempo, setGameTempo] = useState(10000);\n  const [notifications, setRemainNotifications] = useState([...Array(48).keys()]);\n  const [locations, setLocations] = useState([{ x:getX(), y:getY() }]);\n  const [currNotifications, setCurrNotifications] = useState([{ 0:'4', 1:'9'}]);\n\n  useInterval(() => {\n    setLocations([\n      ...locations,\n      {\n        x: getX(),\n        y: getY()\n      }\n    ]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = (notificationNumber.length === 1)\n      ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n\n   setCurrNotifications([\n      ...currNotifications,\n     nextNotification\n      ]);\n\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay);\n\n  // Make it faster every second!\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n\n  const onSwipedLeft = (type, category, notification) => {\n    console.log('left', type, category);\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    console.log('right', type, category);\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n\n  };\n\n  return (\n    <>\n      {\n        locations.map((location, idx) => {\n          if (!currNotifications[idx]) return null;\n          const currSkill = skills[currNotifications[idx][0]];\n          const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n          const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n          const category = currSkill.title;\n          \n          return (\n            <Swipe key={idx} onSwipedLeft={() => onSwipedLeft(notificationType, category, idx)} onSwipedRight={() => onSwipedRight(notificationType, category, idx)}>\n              <NotificationBox top={location.x} left={location.y}>\n                <Svg width={BOX_WIDTH}/>\n              </NotificationBox>\n            </Swipe>\n          )\n        })\n      }\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}