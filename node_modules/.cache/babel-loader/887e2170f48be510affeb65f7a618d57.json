{"ast":null,"code":"import _slicedToArray from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/shem/Documents/Dev/noti-game/src/components/Main.js\";\nimport React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component';\nimport { BOX_HEIGHT, BOX_WIDTH, skills } from './consts';\nimport { TextProgress, StartButton } from './style';\nimport { JumpingBox, exitPoints } from './JumpingBox/style';\nconst availSpaceY = window.innerHeight - BOX_HEIGHT;\nconst availSpaceX = window.innerWidth - BOX_WIDTH;\n\nconst getX = () => Math.round(Math.random() * availSpaceY);\n\nconst getY = () => Math.round(Math.random() * availSpaceX);\n\nexport const Main = () => {\n  const _useState = useState([{\n    x: getX(),\n    y: getY()\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        locations = _useState2[0],\n        setLocations = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        start = _useState4[0],\n        setStart = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        skillNToll = _useState6[0],\n        setSkillNToll = _useState6[1];\n\n  const startGame = () => {\n    setInterval(moveBox, 1000);\n  };\n\n  const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\n  const moveBox = () => {\n    setLocations([...locations, {\n      x: getX(),\n      y: getY()\n    }]);\n    let skillNo;\n    skillNo = getRandomInt(5);\n    const tools = skills[skillNo].tools;\n    const randToolNo = getRandomInt(tools.length);\n    const randomTool = tools[randToolNo];\n    setSkillNToll({\n      skillNo,\n      tool: randomTool\n    });\n    tools.splice(randToolNo, 1);\n    if (!start) setStart(true);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, !start ? React.createElement(StartButton, {\n    onClick: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"START GAME\") : locations.map((location, idx) => React.createElement(Swipe, {\n    key: idx,\n    onSwipedLeft: () => console.log('swipe left'),\n    onSwipedRight: () => console.log('swipe right'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(JumpingBox, {\n    location: \"topLeft\",\n    top: location.x,\n    left: location.y,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, skillNToll.tool))), skills.map(skill => React.createElement(TextProgress, {\n    key: skill.title,\n    color: skill.color,\n    progress: skill.progress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, skill.title)));\n};","map":{"version":3,"sources":["/Users/shem/Documents/Dev/noti-game/src/components/Main.js"],"names":["React","useState","Swipe","BOX_HEIGHT","BOX_WIDTH","skills","TextProgress","StartButton","JumpingBox","exitPoints","availSpaceY","window","innerHeight","availSpaceX","innerWidth","getX","Math","round","random","getY","Main","x","y","locations","setLocations","start","setStart","skillNToll","setSkillNToll","startGame","setInterval","moveBox","getRandomInt","max","floor","skillNo","tools","randToolNo","length","randomTool","tool","splice","map","location","idx","console","log","skill","title","color","progress"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component'\n\nimport { BOX_HEIGHT, BOX_WIDTH, skills} from './consts';\nimport { TextProgress, StartButton } from './style';\nimport { JumpingBox, exitPoints } from './JumpingBox/style';\n\nconst availSpaceY = window.innerHeight - BOX_HEIGHT;\nconst availSpaceX = window.innerWidth - BOX_WIDTH;\nconst getX = () => Math.round(Math.random() * availSpaceY);\nconst getY = () => Math.round(Math.random() * availSpaceX);\n\nexport const Main = () => {\n  const [locations, setLocations] = useState([{ x:getX(), y:getY() }]);\n  const [start, setStart] = useState(false);\n  const [skillNToll, setSkillNToll] = useState([]);\n\n  const startGame = () => {\n    setInterval(moveBox, 1000);\n  };\n\n  const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\n  const moveBox = () => {\n    setLocations([\n      ...locations,\n      {\n        x: getX(),\n        y: getY()\n      }\n    ]);\n\n    let skillNo;\n\n    skillNo = getRandomInt(5);\n    const tools = skills[skillNo].tools;\n\n    const randToolNo = getRandomInt(tools.length);\n    const randomTool = tools[randToolNo];\n    setSkillNToll({ skillNo, tool:randomTool });\n    tools.splice(randToolNo, 1);\n\n    if (!start) setStart(true);\n  };\n\n  return (\n    <div>\n      {!start ? <StartButton onClick={startGame}>START GAME</StartButton> :\n        locations.map((location, idx) => (\n          <Swipe key={idx} onSwipedLeft={() => console.log('swipe left')} onSwipedRight={() => console.log('swipe right')}>\n            <JumpingBox location='topLeft' top={location.x} left={location.y}>\n              {skillNToll.tool}\n            </JumpingBox>\n          </Swipe>\n        ))\n      }\n      {skills.map((skill) => <TextProgress key={skill.title} color={skill.color} progress={skill.progress}>{skill.title}</TextProgress>)}\n    </div>\n  );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}