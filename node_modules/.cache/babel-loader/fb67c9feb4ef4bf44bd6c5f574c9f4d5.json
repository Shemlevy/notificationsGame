{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from 'react';\n\nvar isTouchEvent = function (event) {\n  if (window.TouchEvent !== undefined) {\n    return event instanceof TouchEvent;\n  }\n\n  return event.touches !== undefined;\n};\n\nvar Swipe = function (_super) {\n  __extends(Swipe, _super);\n\n  function Swipe() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.store = {\n      x: 0,\n      y: 0,\n      status: false,\n      detected: false,\n      delta: 50\n    };\n\n    _this.prepare = function (e) {\n      if (_this.props.preventDefault) e.preventDefault();\n      if (_this.props.stopPropagation) e.stopPropagation();\n      return e.nativeEvent;\n    };\n\n    _this.moveStart = function (e) {\n      var x = 0;\n      var y = 0;\n      var touches = e.touches;\n\n      if (e instanceof MouseEvent) {\n        x = e.clientX;\n        y = e.clientY;\n      }\n\n      if (isTouchEvent(e) && touches) {\n        if (!touches[0]) {\n          throw new Error('touch is not find');\n        }\n\n        x = touches[0].clientX;\n        y = touches[0].clientY;\n      }\n\n      _this.store.x = parseFloat(x.toFixed(2));\n      _this.store.y = parseFloat(y.toFixed(2));\n      _this.store.status = true;\n      _this.store.detected = false;\n    };\n\n    _this.move = function (e) {\n      if (!_this.store.status) return;\n      var x = 0;\n      var y = 0;\n      var touches = e.touches;\n\n      if (e instanceof MouseEvent) {\n        x = e.clientX;\n        y = e.clientY;\n      }\n\n      if (isTouchEvent(event) && touches) {\n        if (!touches[0]) {\n          throw new Error('touch is not find');\n        }\n\n        x = touches[0].clientX;\n        y = touches[0].clientY;\n      }\n\n      x = parseFloat(x.toFixed(2));\n      y = parseFloat(y.toFixed(2));\n      var tX = parseFloat((x - _this.store.x).toFixed(2));\n      var tY = parseFloat((y - _this.store.y).toFixed(2));\n\n      if (_this.props.onSwipe) {\n        _this.props.onSwipe({\n          x: tX,\n          y: tY\n        });\n      }\n\n      if (Math.abs(tX) >= _this.props.delta) {\n        if (tX > _this.props.delta) {\n          _this.props.onSwipingRight(tX);\n        } else if (tX < -_this.props.delta) {\n          _this.props.onSwipingLeft(tX);\n        }\n      } else if (Math.abs(tY) >= _this.props.delta) {\n        if (tY > _this.props.delta) {\n          _this.props.onSwipingDown(tY);\n        } else if (tY < -_this.props.delta) {\n          _this.props.onSwipingUp(tY);\n        }\n      }\n\n      if (!_this.store.detected) {\n        if (Math.abs(tX) >= _this.props.delta) {\n          if (tX > _this.props.delta) {\n            _this.props.onSwipedRight();\n\n            _this.store.detected = true;\n          } else if (tX < -_this.props.delta) {\n            _this.props.onSwipedLeft();\n\n            _this.store.detected = true;\n          }\n        } else if (Math.abs(tY) >= _this.props.delta) {\n          if (tY > _this.props.delta) {\n            _this.props.onSwipedDown();\n\n            _this.store.detected = true;\n          } else if (tY < -_this.props.delta) {\n            _this.props.onSwipedUp();\n\n            _this.store.detected = true;\n          }\n        }\n      }\n    };\n\n    _this.moveEnd = function () {\n      _this.store.x = 0;\n      _this.store.y = 0;\n      _this.store.status = false;\n      _this.store.detected = false;\n\n      _this.props.onSwipeEnd();\n    };\n\n    return _this;\n  }\n\n  Swipe.prototype.render = function () {\n    var _this = this;\n\n    var start = function (e) {\n      var event = _this.prepare(e);\n\n      _this.moveStart(event);\n    };\n\n    var move = function (e) {\n      var event = _this.prepare(e);\n\n      _this.move(event);\n    };\n\n    var end = function (e) {\n      _this.prepare(e);\n\n      _this.moveEnd();\n    };\n\n    var newProps = {\n      className: this.props.className || undefined,\n      style: this.props.style || {},\n      onTouchStart: this.props.detectTouch ? start : function (_) {},\n      onTouchMove: this.props.detectTouch ? move : function (_) {},\n      onTouchEnd: this.props.detectTouch ? end : function (_) {},\n      onMouseDown: this.props.detectMouse ? start : function (_) {},\n      onMouseMove: this.props.detectMouse ? move : function (_) {},\n      onMouseUp: this.props.detectMouse ? end : function (_) {},\n      onTransitionEnd: this.props.onTransitionEnd\n    };\n\n    if (newProps.style !== undefined) {\n      newProps.style.touchAction = 'none';\n    }\n\n    var elementType = this.props.nodeName || this.props.node || 'div';\n    return React.createElement(elementType, newProps, this.props.children);\n  };\n\n  Swipe.defaultProps = {\n    delta: 50,\n    detectMouse: true,\n    detectTouch: false,\n    preventDefault: false,\n    stopPropagation: false,\n    onSwipe: function (p) {},\n    onSwipingLeft: function (x) {},\n    onSwipingRight: function (x) {},\n    onSwipingUp: function (y) {},\n    onSwipingDown: function (y) {},\n    onSwipedLeft: function () {},\n    onSwipedRight: function () {},\n    onSwipedUp: function () {},\n    onSwipedDown: function () {},\n    onSwipeEnd: function () {},\n    onTransitionEnd: function () {}\n  };\n  return Swipe;\n}(React.Component);\n\nexport { Swipe };","map":null,"metadata":{},"sourceType":"module"}