{"ast":null,"code":"import _objectSpread from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js\";\nimport React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\nimport Skills from '../Skills';\nexport const Notifications = () => {\n  //Hooks state\n  const _useState = useState(2000),\n        _useState2 = _slicedToArray(_useState, 2),\n        delay = _useState2[0],\n        setDelay = _useState2[1];\n\n  const _useState3 = useState(10000),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameTempo = _useState4[0],\n        setGameTempo = _useState4[1];\n\n  const _useState5 = useState([...Array(48).keys()]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notifications = _useState6[0],\n        setRemainNotifications = _useState6[1];\n\n  const _useState7 = useState([{\n    x: getX(),\n    y: getY()\n  }]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        locations = _useState8[0],\n        setLocations = _useState8[1];\n\n  const _useState9 = useState([{\n    0: '4',\n    1: '9'\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        currNotifications = _useState10[0],\n        setCurrNotifications = _useState10[1];\n\n  const _useState11 = useState({\n    growth: 10,\n    belong: 10,\n    esteem: 10,\n    safety: 10,\n    energy: 10\n  }),\n        _useState12 = _slicedToArray(_useState11, 2),\n        skillsProgress = _useState12[0],\n        setSkillsProgress = _useState12[1];\n\n  useInterval(() => {\n    setLocations([...locations, {\n      x: getX(),\n      y: getY()\n    }]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = notificationNumber.length === 1 ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n    setCurrNotifications([...currNotifications, nextNotification]);\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay); // Make it faster every second!\n\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n  const onSwipedLeft = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'good' ? 10 : -10);\n    setSkillsProgress(_objectSpread({}, skillsProgress, {\n      [category]: newProgress >= 10 ? newProgress : 10\n    }));\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'bad' ? 10 : -10);\n    setSkillsProgress(_objectSpread({}, skillsProgress, {\n      [category]: newProgress >= 10 ? newProgress : 10\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Skills, {\n    skillsProgress: skillsProgress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(CSSTransitionGroup, {\n    transitionName: \"example\",\n    transitionLeaveTimeout: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, locations.map((location, idx) => {\n    if (!currNotifications[idx]) return null;\n    const currSkill = skills[currNotifications[idx][0]];\n    const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n    const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n    const category = currSkill.title;\n    return React.createElement(Swipe, {\n      key: idx,\n      onSwipedLeft: () => onSwipedLeft(notificationType, category, idx),\n      onSwipedRight: () => onSwipedRight(notificationType, category, idx),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(NotificationBox, {\n      top: location.x,\n      left: location.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      key: idx,\n      width: BOX_WIDTH,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  })));\n};","map":{"version":3,"sources":["/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js"],"names":["React","useState","Swipe","CSSTransitionGroup","NotificationBox","BOX_WIDTH","skills","useInterval","getRandomInt","getY","getX","Skills","Notifications","delay","setDelay","gameTempo","setGameTempo","Array","keys","notifications","setRemainNotifications","x","y","locations","setLocations","currNotifications","setCurrNotifications","growth","belong","esteem","safety","energy","skillsProgress","setSkillsProgress","notificationNumber","length","toString","nextNotification","filter","_","idx","onSwipedLeft","type","category","notification","newProgress","onSwipedRight","map","location","currSkill","Svg","svg","notificationType","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component'\nimport { CSSTransitionGroup } from 'react-transition-group';\n\n\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\nimport Skills from '../Skills';\n\nexport const Notifications = () => {\n  //Hooks state\n  const [delay, setDelay] = useState(2000);\n  const [gameTempo, setGameTempo] = useState(10000);\n  const [notifications, setRemainNotifications] = useState([...Array(48).keys()]);\n  const [locations, setLocations] = useState([{ x:getX(), y:getY() }]);\n  const [currNotifications, setCurrNotifications] = useState([{ 0:'4', 1:'9'}]);\n  const [skillsProgress, setSkillsProgress] = useState({\n    growth: 10,\n    belong: 10,\n    esteem: 10,\n    safety: 10,\n    energy: 10,\n  });\n\n  useInterval(() => {\n    setLocations([\n      ...locations,\n      {\n        x: getX(),\n        y: getY()\n      }\n    ]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = (notificationNumber.length === 1)\n      ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n\n   setCurrNotifications([\n      ...currNotifications,\n     nextNotification\n      ]);\n\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay);\n\n  // Make it faster every second!\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n\n  const onSwipedLeft = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'good' ? 10 : -10);\n    setSkillsProgress({\n      ...skillsProgress,\n      [category]: newProgress >= 10 ? newProgress : 10\n    })\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'bad' ? 10 : -10);\n    setSkillsProgress({\n      ...skillsProgress,\n      [category]: newProgress >= 10 ? newProgress : 10 \n    })\n\n  };\n\n  return (\n    <>\n      <Skills skillsProgress={skillsProgress} />\n      <CSSTransitionGroup\n        transitionName=\"example\"\n        transitionLeaveTimeout={300}>\n      {\n        locations.map((location, idx) => {\n          if (!currNotifications[idx]) return null;\n          const currSkill = skills[currNotifications[idx][0]];\n          const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n          const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n          const category = currSkill.title;\n          \n          return (\n\n              <Swipe key={idx} onSwipedLeft={() => onSwipedLeft(notificationType, category, idx)} onSwipedRight={() => onSwipedRight(notificationType, category, idx)}>\n                <NotificationBox top={location.x} left={location.y}>\n                  <Svg key={idx} width={BOX_WIDTH}/>\n                </NotificationBox>\n              </Swipe>\n          )\n        })\n      }\n      </CSSTransitionGroup>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}