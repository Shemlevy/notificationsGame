{"ast":null,"code":"import _objectSpread from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/shem/Documents/Dev/noti-game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js\";\nimport React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills, barDownSound, barUpSound, trashSound } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\nimport Skills from '../Skills';\nexport const Notifications = () => {\n  //Hooks state\n  const _useState = useState(new Audio('../../sounds/barUp.mp3')),\n        _useState2 = _slicedToArray(_useState, 1),\n        audio = _useState2[0];\n\n  const _useState3 = useState(2000),\n        _useState4 = _slicedToArray(_useState3, 2),\n        delay = _useState4[0],\n        setDelay = _useState4[1];\n\n  const _useState5 = useState(10000),\n        _useState6 = _slicedToArray(_useState5, 2),\n        gameTempo = _useState6[0],\n        setGameTempo = _useState6[1];\n\n  const _useState7 = useState([...Array(48).keys()]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        notifications = _useState8[0],\n        setRemainNotifications = _useState8[1];\n\n  const _useState9 = useState([{\n    x: getX(),\n    y: getY()\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        locations = _useState10[0],\n        setLocations = _useState10[1];\n\n  const _useState11 = useState([{\n    0: '4',\n    1: '9'\n  }]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        currNotifications = _useState12[0],\n        setCurrNotifications = _useState12[1];\n\n  const _useState13 = useState({\n    growth: 10,\n    belong: 10,\n    esteem: 10,\n    safety: 10,\n    energy: 10\n  }),\n        _useState14 = _slicedToArray(_useState13, 2),\n        skillsProgress = _useState14[0],\n        setSkillsProgress = _useState14[1];\n\n  useInterval(() => {\n    setLocations([...locations, {\n      x: getX(),\n      y: getY()\n    }]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = notificationNumber.length === 1 ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n    setCurrNotifications([...currNotifications, nextNotification]);\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay); // Make it faster every second!\n\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n  const onSwipedLeft = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'good' ? 10 : -10);\n    setSkillsProgress(_objectSpread({}, skillsProgress, {\n      [category]: newProgress >= 10 ? newProgress : 10\n    }));\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    const isRight = type === 'bad';\n    setCurrNotifications(currNotifications.filter((_, idx) => idx !== notification));\n    setLocations(locations.filter((_, idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (isRight ? 10 : -10);\n    setSkillsProgress(_objectSpread({}, skillsProgress, {\n      [category]: newProgress >= 10 ? newProgress : 10\n    }));\n    console.log(skills, category);\n    isRight ? audio.play() : audio.play();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Skills, {\n    skillsProgress: skillsProgress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(CSSTransitionGroup, {\n    transitionName: \"out\",\n    transitionEnterTimeout: 4000,\n    transitionLeaveTimeout: 3000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, locations.map((location, idx) => {\n    if (!currNotifications[idx]) return null;\n    const currSkill = skills[currNotifications[idx][0]];\n    const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n    const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n    const category = currSkill.title;\n    return React.createElement(Swipe, {\n      key: idx,\n      onSwipedLeft: () => onSwipedLeft(notificationType, category, idx),\n      onSwipedRight: () => onSwipedRight(notificationType, category, idx),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(NotificationBox, {\n      top: location.x,\n      left: location.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      className: \"example\",\n      key: idx,\n      width: BOX_WIDTH,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })));\n  })));\n};","map":{"version":3,"sources":["/Users/shem/Documents/Dev/noti-game/src/components/Noficitaions/index.js"],"names":["React","useState","Swipe","CSSTransitionGroup","NotificationBox","BOX_WIDTH","skills","barDownSound","barUpSound","trashSound","useInterval","getRandomInt","getY","getX","Skills","Notifications","Audio","audio","delay","setDelay","gameTempo","setGameTempo","Array","keys","notifications","setRemainNotifications","x","y","locations","setLocations","currNotifications","setCurrNotifications","growth","belong","esteem","safety","energy","skillsProgress","setSkillsProgress","notificationNumber","length","toString","nextNotification","filter","_","idx","onSwipedLeft","type","category","notification","newProgress","onSwipedRight","isRight","console","log","play","map","location","currSkill","Svg","svg","notificationType","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Swipe } from 'react-swipe-component'\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport { NotificationBox } from './style';\nimport { BOX_WIDTH, skills, barDownSound, barUpSound, trashSound } from '../consts';\nimport { useInterval, getRandomInt, getY, getX } from '../utilis';\nimport Skills from '../Skills';\n\nexport const Notifications = () => {\n  //Hooks state\n\n  const [audio] = useState(new Audio('../../sounds/barUp.mp3'));\n\n  const [delay, setDelay] = useState(2000);\n  const [gameTempo, setGameTempo] = useState(10000);\n  const [notifications, setRemainNotifications] = useState([...Array(48).keys()]);\n  const [locations, setLocations] = useState([{ x:getX(), y:getY() }]);\n  const [currNotifications, setCurrNotifications] = useState([{ 0:'4', 1:'9'}]);\n  const [skillsProgress, setSkillsProgress] = useState({\n    growth: 10,\n    belong: 10,\n    esteem: 10,\n    safety: 10,\n    energy: 10,\n  });\n\n  useInterval(() => {\n    setLocations([\n      ...locations,\n      {\n        x: getX(),\n        y: getY()\n      }\n    ]);\n    const notificationNumber = notifications[getRandomInt(notifications.length)].toString();\n    const nextNotification = (notificationNumber.length === 1)\n      ? {\n      0: '0',\n      1: notificationNumber\n    } : {\n      0: notificationNumber[0],\n      1: notificationNumber[1]\n    };\n\n   setCurrNotifications([\n      ...currNotifications,\n     nextNotification\n      ]);\n\n\n    if (currNotifications.length === 60) {\n      setDelay(null);\n      setGameTempo(null);\n    }\n\n    setRemainNotifications(notifications.filter((_, idx) => idx !== +notificationNumber));\n  }, delay);\n\n  // Make it faster every second!\n  useInterval(() => {\n    if (delay > 4000) {\n      setDelay(delay / 1.5);\n    }\n  }, gameTempo);\n\n\n  const onSwipedLeft = (type, category, notification) => {\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (type === 'good' ? 10 : -10);\n    setSkillsProgress({\n      ...skillsProgress,\n      [category]: newProgress >= 10 ? newProgress : 10\n    })\n  };\n\n  const onSwipedRight = (type, category, notification) => {\n    const isRight = type === 'bad';\n    setCurrNotifications(currNotifications.filter((_,idx) => idx !== notification));\n    setLocations(locations.filter((_,idx) => idx !== notification));\n    const newProgress = skillsProgress[category] + (isRight ? 10 : -10);\n    setSkillsProgress({\n      ...skillsProgress,\n      [category]: newProgress >= 10 ? newProgress : 10 \n    });\n    console.log(skills, category);\n    isRight ? audio.play() : audio.play();\n  };\n\n  return (\n    <>\n      <Skills skillsProgress={skillsProgress} />\n      <CSSTransitionGroup\n        transitionName=\"out\"\n        transitionEnterTimeout={4000}\n        transitionLeaveTimeout={3000}>\n      {\n        locations.map((location, idx) => {\n          if (!currNotifications[idx]) return null;\n          const currSkill = skills[currNotifications[idx][0]];\n          const Svg = currSkill.notifications[currNotifications[idx][1]].svg;\n          const notificationType = currSkill.notifications[currNotifications[idx][1]].type;\n          const category = currSkill.title;\n          \n          return (\n              <Swipe key={idx} onSwipedLeft={() => onSwipedLeft(notificationType, category, idx)} onSwipedRight={() => onSwipedRight(notificationType, category, idx)}>\n                <NotificationBox top={location.x} left={location.y}>\n                  <Svg className=\"example\" key={idx} width={BOX_WIDTH}/>\n                </NotificationBox>\n              </Swipe>\n          )\n        })\n      }\n      </CSSTransitionGroup>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}